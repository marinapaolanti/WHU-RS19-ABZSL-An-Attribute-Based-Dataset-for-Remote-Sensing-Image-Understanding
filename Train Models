import os
import pandas as pd
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader
from torchvision import transforms, models
from torchvision.models import efficientnet_b0
from sklearn.model_selection import train_test_split
from sklearn.metrics import precision_recall_fscore_support, f1_score
from torchvision.models import vit_b_16

df = pd.read_csv("/content/drive/MyDrive/RS_Dataset.csv", sep=';')
df['Filepath'] = df['Filepath'].str.replace("Train\\", "/content/WHU-RS19/", regex=False)
df['Filepath'] = df['Filepath'].str.replace("\\", "/", regex=False)
df = df[df['Filepath'].apply(os.path.exists)]

if len(df) == 0:
    raise ValueError("❌ Nessuna immagine valida trovata.")
else:
    print("✅ Immagini trovate:", len(df))
    print("Esempio:", df['Filepath'].iloc[0])

train_df, test_df = train_test_split(df, test_size=0.3, random_state=42)
print("Train set:", len(train_df), "| Test set:", len(test_df))

class AttributeDataset(Dataset):
    def __init__(self, dataframe, transform=None):
        self.data = dataframe
        self.transform = transform
        self.image_paths = dataframe['Filepath'].tolist()
        self.labels = dataframe.iloc[:, 2:-1].values.astype(np.float32)

    def __len__(self):
        return len(self.data)

    def __getitem__(self, idx):
        image_path = self.image_paths[idx]
        image = Image.open(image_path).convert('RGB')
        label = self.labels[idx]

        if self.transform:
            image = self.transform(image)

        return image, torch.tensor(label)

def get_model(model_name, num_classes):
    if model_name == 'resnet18':
        model = models.resnet18(weights='IMAGENET1K_V1')
        model.fc = nn.Sequential(
            nn.Linear(model.fc.in_features, num_classes),
            nn.Sigmoid()
        )
    elif model_name == 'vgg16':
        model = models.vgg16(weights='IMAGENET1K_V1')
        model.classifier[6] = nn.Sequential(
            nn.Linear(model.classifier[6].in_features, num_classes),
            nn.Sigmoid()
        )
    elif model_name == 'inception_v3':
        model = models.inception_v3(weights='IMAGENET1K_V1', aux_logits=True)
        model.fc = nn.Sequential(
            nn.Linear(model.fc.in_features, num_classes),
            nn.Sigmoid()
        )
    elif model_name == 'vit_b_16':
        model = vit_b_16(weights='IMAGENET1K_V1')
        model.heads = nn.Sequential(
            nn.Linear(model.heads.head.in_features, num_classes),
            nn.Sigmoid()
        )
    elif model_name == 'efficientnet_b0':
        model = efficientnet_b0(weights='IMAGENET1K_V1')
        model.classifier[1] = nn.Sequential(
            nn.Linear(model.classifier[1].in_features, num_classes),
            nn.Sigmoid()
        )
    else:
        raise ValueError(f"Model {model_name} not supported.")
    return model

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
batch_size = 32
n_epochs = 50
models_to_train = ['resnet18', 'vgg16', 'inception_v3', 'vit_b_16', 'efficientnet_b0']

results = {}

for model_name in models_to_train:
    print(f"\n🚀 Training {model_name.upper()}...")

    # Trasformazioni
    if model_name == 'inception_v3':
        transform = transforms.Compose([
            transforms.Resize((299, 299)),
            transforms.ToTensor(),
        ])
    elif model_name == 'vit_b_16':
        transform = transforms.Compose([
            transforms.Resize((224, 224)),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])  # Vit wants normalized input
        ])
    elif model_name == 'efficientnet_b0':
        transform = transforms.Compose([
            transforms.Resize((224, 224)),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406],
                                 [0.229, 0.224, 0.225])
        ])
    else:
        transform = transforms.Compose([
            transforms.Resize((224, 224)),
            transforms.ToTensor(),
        ])

    train_dataset = AttributeDataset(train_df, transform=transform)
    test_dataset = AttributeDataset(test_df, transform=transform)

    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
    test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)

    model = get_model(model_name, num_classes=len(train_df.columns[2:-1])).to(device)
    optimizer = optim.Adam(model.parameters(), lr=1e-4)
    criterion = nn.BCELoss()

    train_losses = []
    train_accuracies = []

    for epoch in range(n_epochs):
        model.train()
        running_loss = 0.0
        correct = 0
        total = 0

        for images, labels in train_loader:
            images, labels = images.to(device), labels.to(device)

            optimizer.zero_grad()
            outputs = model(images)
            if isinstance(outputs, tuple):  # Solo per Inception
                outputs = outputs[0]

            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            running_loss += loss.item()
            preds = (outputs > 0.5).float()
            correct += (preds == labels).sum().item()
            total += labels.numel()

        epoch_loss = running_loss / len(train_loader)
        epoch_acc = correct / total

        train_losses.append(epoch_loss)
        train_accuracies.append(epoch_acc)

        print(f"Epoch {epoch+1}/{n_epochs} - Loss: {epoch_loss:.4f} - Accuracy: {epoch_acc:.4f}")

    results[model_name] = {
        'loss': train_losses,
        'accuracy': train_accuracies
    }

print("\n✅ Tutto il training completato!")

# 8. Plot finale
plt.figure(figsize=(12, 5))
for model_name in models_to_train:
    plt.plot(results[model_name]['loss'], label=f"{model_name} - Loss")
plt.title("Loss")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.legend()
plt.grid()
plt.show()

plt.figure(figsize=(12, 5))
for model_name in models_to_train:
    plt.plot(results[model_name]['accuracy'], label=f"{model_name} - Accuracy")
plt.title("Accuracy")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.legend()
plt.grid()
plt.show()
